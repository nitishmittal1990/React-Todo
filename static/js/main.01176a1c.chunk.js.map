{"version":3,"sources":["components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","useState","isEditing","setIsEditing","name","newTodoText","setNewTodoText","className","isCompleted","id","key","type","checked","onChange","e","completeTodo","target","dataset","data-id","defaultValue","autoFocus","value","onClick","updateTodo","deleteTodo","App","todos","setTodos","getUpperIndex","todoList","index","eachtodo","Number","createTodo","newTodo","document","getElementById","upperIndex","newTodoList","todoId","newTodos","todoToBeUpdated","filter","todo","getIndexOfTodo","findIndex","splice","updatedTodoItem","push","deleteTodoIndex","todoText","map","placeholder","onKeyPress","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01176a1c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Todo.css';\n\n\nfunction Todo(props) {\n    const [isEditing, setIsEditing] = useState(false);\n    const [newTodoText, setNewTodoText] = useState(props.name);\n\n    const handleTodoStatus = (e) => {\n        props.completeTodo(e.target.dataset.id, e.target.checked);\n    }\n\n    const handleClick = (e) => {\n        props.deleteTodo(e.target.dataset.id);\n    }\n\n    const handleEditTodo = (e) => {\n        setIsEditing(true);\n    }\n\n    const handleUpdateTodo = (e) => {\n        if(newTodoText !== '') {\n            props.updateTodo(e.target.dataset.id, newTodoText);\n            setIsEditing(false);\n        }\n    }\n\n    const handleChange = (e) => {\n        setNewTodoText(e.target.value);\n    }\n\n    return (\n        <div className={props.isCompleted ? 'todo done' : 'todo'} id={props.id} key={props.id}> \n            <div className=\"form-group\">\n                <input className=\"checkbox\" type=\"checkbox\" checked={props.isCompleted} onChange={handleTodoStatus} data-id={props.id} />\n                <label></label>\n            </div>\n            {isEditing ? (<input defaultValue={props.name} autoFocus className=\"editinput\" onChange={handleChange} />) : (<p>{props.name}</p>)}\n            <div className=\"todo-actions\">\n                <div className=\"todobtns\">\n                    {props.isCompleted ? '' : (<button onClick={handleEditTodo}>Edit</button>)}\n                    {isEditing ? (<button onClick={handleUpdateTodo} className='updatebtn' data-id={props.id}>Update</button>) : ''}\n                </div>\n                <button className='delete-btn' onClick={handleClick} data-id={props.id}>Delete</button>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Todo;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Todo from './components/Todo.js';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const getUpperIndex = (todoList) => {\n    \n    let index = 0;\n    for (let eachtodo of todoList) {\n      if (Number(eachtodo.id) > index) {\n        index = eachtodo.id;\n      }\n    }\n    \n    return index;\n  }\n\n  const handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      createTodo();\n    }\n  }\n\n  const createTodo = () => {\n    const newTodo = document.getElementById('todo').value;\n    let upperIndex = getUpperIndex(todos);\n     if(newTodo !== '') {\n       let newTodoObject = {\n         'id': upperIndex + 1,\n         'name': newTodo,\n         'isCompleted': false\n       };\n       const newTodoList = [newTodoObject, ...todos];\n       setTodos(newTodoList);\n       document.getElementById('todo').value = '';\n     }\n     \n  }\n\n\n  const completeTodo = (todoId, isCompleted) => {\n    todoId = Number(todoId);\n    const newTodos = [...todos];\n    const todoToBeUpdated = newTodos.filter((todo) => {\n      return todo.id === todoId;\n    });\n\n    const getIndexOfTodo = newTodos.findIndex((todo) => todo.id === todoId);\n\n    if(getIndexOfTodo > -1) {\n      newTodos.splice(getIndexOfTodo, 1);\n      let upperIndex = getUpperIndex(newTodos);\n      const updatedTodoItem = {\n        'id': upperIndex + 1,\n        'name': todoToBeUpdated[0].name,\n        'isCompleted': isCompleted\n      };\n\n      newTodos.push(updatedTodoItem);\n      setTodos(newTodos);\n    }\n\n  }\n\n  const deleteTodo = (todoId) => {\n    todoId = Number(todoId);\n    const newTodos = [...todos];\n    const deleteTodoIndex = newTodos.findIndex((todo) => todo.id === todoId);\n    if(deleteTodoIndex > -1) {\n      newTodos.splice(deleteTodoIndex, 1);\n      setTodos(newTodos);\n    }\n  }\n\n  const updateTodo = (todoId, todoText) => {\n    todoId = Number(todoId);\n    let newTodos = [...todos];\n    newTodos = newTodos.map((eachtodo) => {\n      if(eachtodo.id === todoId) {\n        eachtodo.name = todoText;\n      } \n      return eachtodo;\n    })\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Todo App</h1>\n      </header>\n      <main>\n        <div className=\"add-todo\">\n          <input\n            type=\"text\"\n            name=\"todo\"\n            placeholder=\"Enter Todo Text\"\n            id=\"todo\"\n            onKeyPress={handleKeyPress}\n          />\n          <input type=\"submit\" value=\"Create Todo\" onClick={createTodo} />\n        </div>\n        <div className=\"todo-list\">\n          {todos.length > 0\n            ? todos.map((todo) => {\n                return (\n                  <Todo\n                    key={todo.id}\n                    id={todo.id}\n                    name={todo.name}\n                    isCompleted={todo.isCompleted}\n                    completeTodo={completeTodo}\n                    deleteTodo={deleteTodo}\n                    updateTodo={updateTodo}\n                  />\n                );\n              })\n            : \"\"}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}